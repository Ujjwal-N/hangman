
/**
 * Handles and parses all HTTP requests to the WordsAPI. 
 * Currently being used only to obtain a word's synonym,
 * which will be used for the hint feature 
 */

//Autogenerated imports for HTTP requests 
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class APIInterfacer {
    /**
     * Returns the first synoym provdided by WordsAPI. Returns an empty string if
     * something goes wrong.
     * 
     * @param word
     * @return
     */
    public static String getSimilar(String word) {
        // Autogenerated code copied from RapidAPI endpoint tester
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://wordsapiv1.p.rapidapi.com/words/" + word + "/synonyms"))
                .header("x-rapidapi-host", "wordsapiv1.p.rapidapi.com")
                .header("x-rapidapi-key", "9JPje8RP94mshA1Xc1qoEiw1Ozd3p1cGJxfjsnxv00RWij2MII")
                .method("GET", HttpRequest.BodyPublishers.noBody()).build();
        HttpResponse<String> response;
        try {
            // There could be no response, which is why there is a try/catch here
            response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());

            // Parses response by finding the indices of brackets and returning the first
            // element in the array, if it exists
            String responseStr = response.body();
            int leftBracket = responseStr.indexOf("[");
            int rightBracket = responseStr.indexOf("]");

            // first condition checks that synonym array from the response has an element,
            // last two conditions should always be true but its there just in case
            if (leftBracket + 1 != rightBracket && leftBracket != -1 && rightBracket != -1) {
                int comma = responseStr.indexOf(",", leftBracket);

                // if no comma, there is only one synonym returned
                if (comma != -1) {
                    return responseStr.substring(leftBracket + 2, comma - 1);
                } else {
                    return responseStr.substring(leftBracket + 2, rightBracket - 1);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // something went wrong, returns an empty string
        return "";
    }

}
